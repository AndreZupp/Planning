// Generated by gencpp from file planning/Car_position.msg
// DO NOT EDIT!


#ifndef PLANNING_MESSAGE_CAR_POSITION_H
#define PLANNING_MESSAGE_CAR_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planning
{
template <class ContainerAllocator>
struct Car_position_
{
  typedef Car_position_<ContainerAllocator> Type;

  Car_position_()
    : car_position_x(0)
    , car_position_y(0)  {
    }
  Car_position_(const ContainerAllocator& _alloc)
    : car_position_x(0)
    , car_position_y(0)  {
  (void)_alloc;
    }



   typedef uint32_t _car_position_x_type;
  _car_position_x_type car_position_x;

   typedef uint32_t _car_position_y_type;
  _car_position_y_type car_position_y;





  typedef boost::shared_ptr< ::planning::Car_position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning::Car_position_<ContainerAllocator> const> ConstPtr;

}; // struct Car_position_

typedef ::planning::Car_position_<std::allocator<void> > Car_position;

typedef boost::shared_ptr< ::planning::Car_position > Car_positionPtr;
typedef boost::shared_ptr< ::planning::Car_position const> Car_positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning::Car_position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning::Car_position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planning::Car_position_<ContainerAllocator1> & lhs, const ::planning::Car_position_<ContainerAllocator2> & rhs)
{
  return lhs.car_position_x == rhs.car_position_x &&
    lhs.car_position_y == rhs.car_position_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planning::Car_position_<ContainerAllocator1> & lhs, const ::planning::Car_position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planning::Car_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning::Car_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::Car_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::Car_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::Car_position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::Car_position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning::Car_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e857b7e9dc7cf44d55616be8e0aab5c";
  }

  static const char* value(const ::planning::Car_position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e857b7e9dc7cf44ULL;
  static const uint64_t static_value2 = 0xd55616be8e0aab5cULL;
};

template<class ContainerAllocator>
struct DataType< ::planning::Car_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning/Car_position";
  }

  static const char* value(const ::planning::Car_position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning::Car_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 car_position_x\n"
"uint32 car_position_y\n"
;
  }

  static const char* value(const ::planning::Car_position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning::Car_position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.car_position_x);
      stream.next(m.car_position_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Car_position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning::Car_position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning::Car_position_<ContainerAllocator>& v)
  {
    s << indent << "car_position_x: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.car_position_x);
    s << indent << "car_position_y: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.car_position_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MESSAGE_CAR_POSITION_H
