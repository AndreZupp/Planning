// Generated by gencpp from file planning/Track_map.msg
// DO NOT EDIT!


#ifndef PLANNING_MESSAGE_TRACK_MAP_H
#define PLANNING_MESSAGE_TRACK_MAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planning
{
template <class ContainerAllocator>
struct Track_map_
{
  typedef Track_map_<ContainerAllocator> Type;

  Track_map_()
    : track_map()  {
    }
  Track_map_(const ContainerAllocator& _alloc)
    : track_map(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _track_map_type;
  _track_map_type track_map;





  typedef boost::shared_ptr< ::planning::Track_map_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning::Track_map_<ContainerAllocator> const> ConstPtr;

}; // struct Track_map_

typedef ::planning::Track_map_<std::allocator<void> > Track_map;

typedef boost::shared_ptr< ::planning::Track_map > Track_mapPtr;
typedef boost::shared_ptr< ::planning::Track_map const> Track_mapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning::Track_map_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning::Track_map_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planning::Track_map_<ContainerAllocator1> & lhs, const ::planning::Track_map_<ContainerAllocator2> & rhs)
{
  return lhs.track_map == rhs.track_map;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planning::Track_map_<ContainerAllocator1> & lhs, const ::planning::Track_map_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planning::Track_map_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning::Track_map_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::Track_map_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::Track_map_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::Track_map_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::Track_map_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning::Track_map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08651d556bc08b887f0ea877fa34f623";
  }

  static const char* value(const ::planning::Track_map_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08651d556bc08b88ULL;
  static const uint64_t static_value2 = 0x7f0ea877fa34f623ULL;
};

template<class ContainerAllocator>
struct DataType< ::planning::Track_map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning/Track_map";
  }

  static const char* value(const ::planning::Track_map_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning::Track_map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] track_map\n"
;
  }

  static const char* value(const ::planning::Track_map_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning::Track_map_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.track_map);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Track_map_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning::Track_map_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning::Track_map_<ContainerAllocator>& v)
  {
    s << indent << "track_map[]" << std::endl;
    for (size_t i = 0; i < v.track_map.size(); ++i)
    {
      s << indent << "  track_map[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.track_map[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MESSAGE_TRACK_MAP_H
