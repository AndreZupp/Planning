// Generated by gencpp from file planning/Stp_stub_data.msg
// DO NOT EDIT!


#ifndef PLANNING_MESSAGE_STP_STUB_DATA_H
#define PLANNING_MESSAGE_STP_STUB_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <planning/Ray_cast.h>
#include <planning/State_machine.h>
#include <planning/Car_info.h>

namespace planning
{
template <class ContainerAllocator>
struct Stp_stub_data_
{
  typedef Stp_stub_data_<ContainerAllocator> Type;

  Stp_stub_data_()
    : ray_cast()
    , state_machine()
    , car_info()  {
    }
  Stp_stub_data_(const ContainerAllocator& _alloc)
    : ray_cast(_alloc)
    , state_machine(_alloc)
    , car_info(_alloc)  {
  (void)_alloc;
    }



   typedef  ::planning::Ray_cast_<ContainerAllocator>  _ray_cast_type;
  _ray_cast_type ray_cast;

   typedef  ::planning::State_machine_<ContainerAllocator>  _state_machine_type;
  _state_machine_type state_machine;

   typedef  ::planning::Car_info_<ContainerAllocator>  _car_info_type;
  _car_info_type car_info;





  typedef boost::shared_ptr< ::planning::Stp_stub_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning::Stp_stub_data_<ContainerAllocator> const> ConstPtr;

}; // struct Stp_stub_data_

typedef ::planning::Stp_stub_data_<std::allocator<void> > Stp_stub_data;

typedef boost::shared_ptr< ::planning::Stp_stub_data > Stp_stub_dataPtr;
typedef boost::shared_ptr< ::planning::Stp_stub_data const> Stp_stub_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning::Stp_stub_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning::Stp_stub_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planning::Stp_stub_data_<ContainerAllocator1> & lhs, const ::planning::Stp_stub_data_<ContainerAllocator2> & rhs)
{
  return lhs.ray_cast == rhs.ray_cast &&
    lhs.state_machine == rhs.state_machine &&
    lhs.car_info == rhs.car_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planning::Stp_stub_data_<ContainerAllocator1> & lhs, const ::planning::Stp_stub_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planning::Stp_stub_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning::Stp_stub_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::Stp_stub_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::Stp_stub_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::Stp_stub_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::Stp_stub_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning::Stp_stub_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44c7d84071af36913c5f647289d9a734";
  }

  static const char* value(const ::planning::Stp_stub_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44c7d84071af3691ULL;
  static const uint64_t static_value2 = 0x3c5f647289d9a734ULL;
};

template<class ContainerAllocator>
struct DataType< ::planning::Stp_stub_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning/Stp_stub_data";
  }

  static const char* value(const ::planning::Stp_stub_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning::Stp_stub_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Ray_cast ray_cast\n"
"State_machine state_machine\n"
"Car_info car_info\n"
"\n"
"================================================================================\n"
"MSG: planning/Ray_cast\n"
"float32[120] raycast\n"
"\n"
"================================================================================\n"
"MSG: planning/State_machine\n"
"string state\n"
"================================================================================\n"
"MSG: planning/Car_info\n"
"float32 speed \n"
"float32 angle\n"
"int8 cpu_temperature\n"
"int8 engine_temperature\n"
"int8 brake_temperature\n"
"float32 fuel_level\n"
;
  }

  static const char* value(const ::planning::Stp_stub_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning::Stp_stub_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ray_cast);
      stream.next(m.state_machine);
      stream.next(m.car_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Stp_stub_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning::Stp_stub_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning::Stp_stub_data_<ContainerAllocator>& v)
  {
    s << indent << "ray_cast: ";
    s << std::endl;
    Printer< ::planning::Ray_cast_<ContainerAllocator> >::stream(s, indent + "  ", v.ray_cast);
    s << indent << "state_machine: ";
    s << std::endl;
    Printer< ::planning::State_machine_<ContainerAllocator> >::stream(s, indent + "  ", v.state_machine);
    s << indent << "car_info: ";
    s << std::endl;
    Printer< ::planning::Car_info_<ContainerAllocator> >::stream(s, indent + "  ", v.car_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MESSAGE_STP_STUB_DATA_H
