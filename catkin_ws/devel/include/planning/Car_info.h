// Generated by gencpp from file planning/Car_info.msg
// DO NOT EDIT!


#ifndef PLANNING_MESSAGE_CAR_INFO_H
#define PLANNING_MESSAGE_CAR_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planning
{
template <class ContainerAllocator>
struct Car_info_
{
  typedef Car_info_<ContainerAllocator> Type;

  Car_info_()
    : speed(0.0)
    , angle(0.0)
    , cpu_temperature(0)
    , engine_temperature(0)
    , brake_temperature(0)
    , fuel_level(0.0)  {
    }
  Car_info_(const ContainerAllocator& _alloc)
    : speed(0.0)
    , angle(0.0)
    , cpu_temperature(0)
    , engine_temperature(0)
    , brake_temperature(0)
    , fuel_level(0.0)  {
  (void)_alloc;
    }



   typedef float _speed_type;
  _speed_type speed;

   typedef float _angle_type;
  _angle_type angle;

   typedef int8_t _cpu_temperature_type;
  _cpu_temperature_type cpu_temperature;

   typedef int8_t _engine_temperature_type;
  _engine_temperature_type engine_temperature;

   typedef int8_t _brake_temperature_type;
  _brake_temperature_type brake_temperature;

   typedef float _fuel_level_type;
  _fuel_level_type fuel_level;





  typedef boost::shared_ptr< ::planning::Car_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning::Car_info_<ContainerAllocator> const> ConstPtr;

}; // struct Car_info_

typedef ::planning::Car_info_<std::allocator<void> > Car_info;

typedef boost::shared_ptr< ::planning::Car_info > Car_infoPtr;
typedef boost::shared_ptr< ::planning::Car_info const> Car_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning::Car_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning::Car_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planning::Car_info_<ContainerAllocator1> & lhs, const ::planning::Car_info_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed &&
    lhs.angle == rhs.angle &&
    lhs.cpu_temperature == rhs.cpu_temperature &&
    lhs.engine_temperature == rhs.engine_temperature &&
    lhs.brake_temperature == rhs.brake_temperature &&
    lhs.fuel_level == rhs.fuel_level;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planning::Car_info_<ContainerAllocator1> & lhs, const ::planning::Car_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planning::Car_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning::Car_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::Car_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::Car_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::Car_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::Car_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning::Car_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e69d1b4b55e3284e3c07c41966f6da7";
  }

  static const char* value(const ::planning::Car_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e69d1b4b55e3284ULL;
  static const uint64_t static_value2 = 0xe3c07c41966f6da7ULL;
};

template<class ContainerAllocator>
struct DataType< ::planning::Car_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning/Car_info";
  }

  static const char* value(const ::planning::Car_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning::Car_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 speed \n"
"float32 angle\n"
"int8 cpu_temperature\n"
"int8 engine_temperature\n"
"int8 brake_temperature\n"
"float32 fuel_level\n"
;
  }

  static const char* value(const ::planning::Car_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning::Car_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.angle);
      stream.next(m.cpu_temperature);
      stream.next(m.engine_temperature);
      stream.next(m.brake_temperature);
      stream.next(m.fuel_level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Car_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning::Car_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning::Car_info_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "cpu_temperature: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cpu_temperature);
    s << indent << "engine_temperature: ";
    Printer<int8_t>::stream(s, indent + "  ", v.engine_temperature);
    s << indent << "brake_temperature: ";
    Printer<int8_t>::stream(s, indent + "  ", v.brake_temperature);
    s << indent << "fuel_level: ";
    Printer<float>::stream(s, indent + "  ", v.fuel_level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MESSAGE_CAR_INFO_H
